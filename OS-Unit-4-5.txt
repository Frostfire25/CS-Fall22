Threads.

Threads allow programs to run multiple tasks at the same time.
A thread is a basic unit of CPU utilization it comprises of:
	- A thread ID.
	- A program counter
	- A register set
	- A stack of tasks.

Benefits of Threading.
	- Responsiveness - May allow continued execution if part of process is blocked, especially importent for user interfaces.
	- Resource Sharing - Threads share resources of process, easier than shared memory or message passing.
	- Economy - Cheaper than process creation, thread switching lower overhead than context switching.
	- Scalability - Process can take advantage of multiprocessor architectures

Single vs Multi-Threaded Applications. 

Multi-Threaded Applications Challenges (From a Developer Standpoint):
	- Dividing Activities
	- Balance
	- Data splitting
	- Data dependency
	- Testing and Debugging

Parallelism - implies a system can peform more than one task simultaneously
	- Data Parallelism - distrubutes subsets of the same sata across multiple cores, operates the same operation on each set.
	- Task parallelism - distrubutes threads accross cores, each thread performing unqiue operations. 
CPU's have hardware threads Ex. (4 cores, 8 threads)

Amdahl's Law - Identifies performance gains from adding additional cores to an application that has both serial and parallel components.
S is serial portion
N is processing cores

speedup <= 1/(S + ((1-S) / N))

If an application is 75% parallel / 25% serial, moving from 1 -> 2 cores results in a speedup of 1.6x.

User & Kener threads
	User Threads:
		- Ran inside of the user space.
		- OS doesn't recognize user threads.
		- Context switch takes less time.
		- No dependency, there can be as many as you want
		- If one thread performs a blocking execution the process can not run.
	Kernel Threads:
		- Ran inside of the OS
		- Context Switch takes more time
		- Hardware depedent (limited #)
		- Non-Blocking, if one thread permforms a blocking execution other threads can run
	Many to One (User threads to Kernel Threads)	
		- Many user level threads mapped to one kernel level thread.
	One to One (User threads to Kernel Threads) BEST! and most commonly used.
		- Each user level thread maps to one kernel thread
		- Examples, windows, linux, solaris
	Many to Many (User threads to Kernel threads)
		- Allows many user level threads to be mapped to many kernel threads.
		- Allows the OS to create a sufficient number of kener threads
	Two-level model
		- Many to many and allows users to thread to be bound to kernel threads

Thread Libraries
	- Thread libraries provides a programmer with an API for creating and managing threads.
		- Either done in user or kernel space.

Pthreads (Process threads)
	- Many be provided at user-level or kernel-level
	- API specifies behavior of the thread library, implementation is up to development of the library.
	#include <pthread.h>

Multi threaded process
	- A thread is like another copy of a process that executes independently.
	- Threads share the same address spce (code, heap)
	- Each thread has separate PC
		- Each thread may run over different part of the program
	- Each thread has separate stack for independent function calls.
	
How threads and process are siilar?
	- Each has its own logical control flow
	- Each can run concurrently
	- Each is context switched
How threads and process are different?
	- Threads share code, processes do not

Why Threads?
	- Parallelism: a single process can effectivly utilize multiple CPU cores.
		- Under stand the difference between concurrency.
			Concurrency: Running multiple threads/process at the same time, even on the single CPU core, by interleaving the executions
			Parallelisms: Running multiple threads/processes in parallel over different CPU cores.
			
	Even if no parallelism, concurrency of threads ensures effective use of the CPU
	
Scheduling threads.
	- OS schedules threads that are ready to run independently,, much like processes.
	- The context of a thread(PC, register) is saved into/restored from thead control block TCB.
	- Threads that are scheduled independently by kernel are called kernel threads.
		- Kernel threads are limited.
		
Thread Pool:
	- A pool of threads.
	Zombie - When there are two processes there are a parent and a child. 
		- Doing the same task as the parent
	Orphan - When the parent exits without calling wait
	Zombie creation : the parent has yet to call wait when chid completes its task.
â€¢ Orphan Creation: when the parent exit without ever calling wait
	
Context-Switch
	- Changing state to execute its function through CPU
	- It happens when a process is moving from a running state to a ready state
	- Only happens in kernel mode.
	- It triggers interrupt handling
	- Ensuring that tasks do not conflict from one process to another
	- Process: Start I/O, Mark P1 as blocked, Save P1, Load P2, Execute P2.
		- Then do P2 while P1 is in an idle state.
		- Then return back to P1.
	
Thread Types
	- One to One
	- Many to One
	- Many to Many
	
IPC communication
	- Two child proceses would communicate with each other using the pipe IPC.
	- Inter-process communications, allows processes ro share data.
	
Synchronous vs Asynchronous
	- Sync signals happen when the context of a given thread is 
		- A parent thread creates one or more children and waits for the children to terminate
		- This is sometimes called fork-joining strategy
	- Async in kernel sets a signal handler and lost its normal work
		- Parent creates child and the parent resumes execution
		- The parent and the child execute concurrently
Signals
	- A certian set of signals supported by the OS
	- Can be sent to a process by OS or another process
	- Signal handler: every process has a default code to execute for each signal

Signal Handling:
	- Signals are used in UNIX systems to notify a process that a particular event has occurred
	- A signal handler is used to proceses signals
		- Signal is handled by one of two signal handlers
			- default
			- user-default
	- Signals can be delivered as Synchronous (generated by proceses) or Asynchronous (generated by event, external to the running process).
	- Terminating a thread before it has finished.
	- Thread to be calceled is TARGET THREAD.
	- Async cancellation terminates the target thread immediately
	- Deferred cancellation allows the target thread to periodically check if it should be cancelled.
	- Invoking thread cancellation requests cancellation, but actual cancellation depends on thread state.
	
Quiz:
	- Life-cycle state machine
	- Concurrency and Parallelism
	- POSIX fork(2) call
	- Thread creation description
	- User Thread and Kernel thread
	- Thread pool and spawning difference